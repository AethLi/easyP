package utils

import io.netty.buffer.ByteBufUtil
import io.netty.handler.codec.socks.SocksAddressType
import io.netty.util.NetUtil
import mu.KotlinLogging
import java.security.MessageDigest
import java.util.*

private val logger = KotlinLogging.logger {}


/**
 * any string to uuid, when it is an actual uuid, return it, otherwise, return an uuid generated by uuidv5
 */
fun String.toUUid(): UUID {
    return try {
        UUID.fromString(this)
    } catch (e: Exception) {
        logger.trace { "to UUid failed, ${e.message}, replace with UUIDv5 method" }
        UUIDv5.uuidOf(this)
    }
}

/**
 * detect if a string is a valid ipv4 address or ipv6 address, otherwise, it is a domain
 */
fun String.toAddressType(): SocksAddressType {
    return when {
        NetUtil.isValidIpV4Address(this) -> SocksAddressType.IPv4
        NetUtil.isValidIpV6Address(this) -> SocksAddressType.IPv6
        else -> SocksAddressType.DOMAIN
    }
}

/**
 * convert a string to sha224 hash
 */
fun String.toSha224(): String {
    val digest = MessageDigest.getInstance("SHA-224")
    val hash = digest.digest(this.toByteArray())
    return ByteBufUtil.hexDump(hash)
}
