package utils

import io.netty.handler.codec.socks.SocksAddressType
import mu.KotlinLogging
import java.util.*
import java.util.regex.Pattern

object SurferUtils {
    private val logger = KotlinLogging.logger {}

    fun getAddressType(addr: String): SocksAddressType {
        return when {
            IPV4_PATTERN.matcher(addr).matches() -> SocksAddressType.IPv4
            addr.contains(":") -> SocksAddressType.IPv6
            else -> SocksAddressType.DOMAIN
        }

    }

    @Suppress("RegExpRedundantEscape")
    private val IPV4_PATTERN: Pattern = Pattern.compile(
        "^(([01]?\\d\\d?|2[0-4]\\d|25[0-5])\\.){3}([01]?\\d\\d?|2[0-4]\\d|25[0-5])$"
    )

    /**
     * any string to uuid, when it is an actual uuid, return it, otherwise, return an uuid generated by uuidv5
     */
    fun toUUid(plainString:String): UUID {
        return try {
            UUID.fromString(plainString)
        } catch (e: Exception) {
            logger.trace { "to UUid failed, ${e.message}" }
            UUIDv5.uuidOf(plainString)
        }
    }

}
